name: Infrastructure deployment in Azure through Terraform

on:
  workflow_call:
    inputs:
      gh-runner:
        type: string
        default: 'ubuntu-latest'
      tf-plan-gh-env:
        required: true
        type: string
      tf-apply-gh-env: 
        required: true
        type: string
      tf-module-version:
        required: true
        type: string
      tf-module-storage-container:
        type: string
        default: 'tf-modules'
      tf-module-version-file:
        type: string
        default: 'version.json'
      tf-parallelism:
        type: number
        default: 50
      tf-plan-filename:
        type: string
        default: 'terraform.tfplan'
      

jobs:

  tf-plan:
    name: Terraform Plan
    environment: ${{ inputs.tf-plan-gh-env }}
    runs-on: ${{ inputs.gh-runner }}
    outputs:
      tf-module-name: ${{ steps.set-module-info.outputs.tf-module-name }}
      tfvars-directory: ${{ steps.set-module-info.outputs.tfvars-directory }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - id: set-module-info
        run: |
          ## Set TF module name
          tf-module-name=$(echo ${{github.workflow}} | cut -d'/' -f1)
          echo "::set-output name=tf-module-name::$tf-module-name"

          ## Set TF vars directory
          tfvars-directory=$(echo ${{github.workflow}} | cut -d'/' -f2-)
          echo "::set-output name=tfvars-directory::$tfvars-directory"
      - name: Create Artifact Directory
        run: mkdir ${{ runner.temp }}/terraform_artifact
      - name: Copy Tfvars
        run: cp ${{ github.workspace }}/${{ steps.set-module-info.outputs.tf-module-name }}/${{ steps.set-module-info.outputs.tfvars-directory }}/* ${{ runner.temp }}/terraform_artifact
      - name: Download Module
        uses: fixpoint/azblob-download-artifact@v3
        with:
          connection-string: ${{ secrets.TF_MODULE_STORAGE_ACCOUNT_CONNECTION_STRING }}
          name: ${{ steps.set-module-info.outputs.tf-module-name }}
          container: ${{ inputs.tf-module-storage-container }}
      - name: Unzip module
        run: unzip ${{ github.workspace }}/${{ steps.set-module-info.outputs.tf-module-name }}/${{ inputs.tf-module-version }}.zip -d ${{ runner.temp }}/terraform_artifact/
      - name: List artifacts
        run: ls -ltr ${{ runner.temp }}/terraform_artifact/
      - name: Setup Backend
        run: |
          echo "terraform {
            backend "azurerm" {}
          }" >> ${{ runner.temp }}/terraform_artifact/backend.tf
      - name: Set Deployment Info
        run: |
          echo "deployment_info = \"{'repo-name':'${{ github.repository }}'}\"" >> ${{ runner.temp }}/terraform_artifact/deployment-info.auto.tfvars
      - name: Set terraform version
        uses: antifree/json-to-variables@v1.0.1
        with:
          filename: ${{ runner.temp }}/terraform_artifact/${{ inputs.tf-module-version-file }}
          prefix: json-var
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.json-var_tf-version }}
      - name: Terraform Init
        run: |
          terraform -chdir=${{ runner.temp }}/terraform_artifact/ init \
            -backend-config=storage_account_name=${{ secrets.TF_BACKEND_STORAGE_ACC_NAME }} \
            -backend-config=container_name=${{ secrets.TF_BACKEND_STORAGE_ACC_CONTAINER_NAME }} \
            -backend-config=key=${{ github.repository }}/${{ steps.set-module-info.outputs.tf-module-name }}/${{ steps.set-module-info.outputs.tfvars-directory }}/terraform.tfstate \
            -backend-config=resource_group_name=${{ secrets.TF_BACKEND_RESOURCE_GROUP_NAME }}  \
            -backend-config=subscription_id=${{ secrets.TF_BACKEND_SUBSCRIPTION_ID }} \
            -backend-config=tenant_id=${{ secrets.ARM_TENANT_ID}} \
            -backend-config=client_id=${{ secrets.ARM_CLIENT_ID }} \
            -backend-config=client_secret=${{ secrets.ARM_CLIENT_SECRET }}
      - name: Terraform Plan
        if: github.event.inputs.tf-action == 'apply'
        run: |
          export ARM_CLIENT_ID="${{ secrets.ARM_CLIENT_ID }}"
          export ARM_CLIENT_SECRET="${{ secrets.ARM_CLIENT_SECRET }}"
          export ARM_SUBSCRIPTION_ID="${{ secrets.ARM_SUBSCRIPTION_ID }}"
          export ARM_TENANT_ID="${{ secrets.ARM_TENANT_ID}}"
          terraform -chdir=${{ runner.temp }}/terraform_artifact/ plan \
            -parallelism=${{ inputs.tf-parallelism }} \
            -out ${{ inputs.tf-plan-filename }} \
            -detailed-exitcode
          rm -rf ${{ runner.temp }}/terraform_artifact/.terraform
      - name: Terraform Destroy Plan
        if: github.event.inputs.tf-action == 'destroy'
        run: |
          export ARM_CLIENT_ID="${{ secrets.ARM_CLIENT_ID }}"
          export ARM_CLIENT_SECRET="${{ secrets.ARM_CLIENT_SECRET }}"
          export ARM_SUBSCRIPTION_ID="${{ secrets.ARM_SUBSCRIPTION_ID }}"
          export ARM_TENANT_ID="${{ secrets.ARM_TENANT_ID}}"
          terraform -chdir=${{ runner.temp }}/terraform_artifact/ plan -destroy \
            -parallelism=${{ inputs.tf-parallelism }}
          rm -rf ${{ runner.temp }}/terraform_artifact/.terraform
      - name: Upload Plan
        uses: actions/upload-artifact@v3.1.1
        with:
          name: terraform_artifact
          path: ${{ runner.temp }}/terraform_artifact/*
          retention-days: 30

  tf-apply:
    name: Terraform Apply
    environment: ${{ inputs.tf-apply-gh-env }}
    runs-on: ${{ inputs.gh-runner }}
    needs: tf-plan
    steps:
      - name: Create Artifact Directory
        run: mkdir ${{ runner.temp }}/terraform_artifact
      - name: Download Plan
        uses: actions/download-artifact@v3.0.1
        with:
          name: terraform_artifact
          path: ${{ runner.temp }}/terraform_artifact
      - name: Set terraform version
        uses: antifree/json-to-variables@v1.0.1
        with:
          filename: ${{ runner.temp }}/terraform_artifact/${{ inputs.tf-module-version-file }}
          prefix: json-var
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.json-var_tf-version }}
      - name: Terraform Init
        run: |
          terraform -chdir=${{ runner.temp }}/terraform_artifact/ init \
            -backend-config=storage_account_name=${{ secrets.TF_BACKEND_STORAGE_ACC_NAME }} \
            -backend-config=container_name=${{ secrets.TF_BACKEND_STORAGE_ACC_CONTAINER_NAME }} \
            -backend-config=key=${{ github.repository }}/${{ needs.tf-plan.outputs.tf-module-name }}/${{ needs.tf-plan.outputs.tfvars-directory }}/terraform.tfstate \
            -backend-config=resource_group_name=${{ secrets.TF_BACKEND_RESOURCE_GROUP_NAME }}  \
            -backend-config=subscription_id=${{ secrets.TF_BACKEND_SUBSCRIPTION_ID }} \
            -backend-config=tenant_id=${{ secrets.ARM_TENANT_ID}} \
            -backend-config=client_id=${{ secrets.ARM_CLIENT_ID }} \
            -backend-config=client_secret=${{ secrets.ARM_CLIENT_SECRET }}
      - name: Terraform Apply
        if: github.event.inputs.tf-action == 'apply'
        run: |
          export ARM_CLIENT_ID="${{ secrets.ARM_CLIENT_ID }}"
          export ARM_CLIENT_SECRET="${{ secrets.ARM_CLIENT_SECRET }}"
          export ARM_SUBSCRIPTION_ID="${{ secrets.ARM_SUBSCRIPTION_ID }}"
          export ARM_TENANT_ID="${{ secrets.ARM_TENANT_ID}}"
          terraform -chdir=${{ runner.temp }}/terraform_artifact/ ${{ github.event.inputs.tf-action }} -auto-approve -parallelism=${{ inputs.tf-parallelism }} ${{ inputs.tf-plan-filename }}
      - name: Terraform Destroy
        if: github.event.inputs.tf-action == 'destroy'
        run: |
          export ARM_CLIENT_ID="${{ secrets.ARM_CLIENT_ID }}"
          export ARM_CLIENT_SECRET="${{ secrets.ARM_CLIENT_SECRET }}"
          export ARM_SUBSCRIPTION_ID="${{ secrets.ARM_SUBSCRIPTION_ID }}"
          export ARM_TENANT_ID="${{ secrets.ARM_TENANT_ID}}"
          terraform -chdir=${{ runner.temp }}/terraform_artifact/ ${{ github.event.inputs.tf-action }} -auto-approve -parallelism=${{ inputs.tf-parallelism }}
